import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get address => "Address";
  String get consentReceiptID => "Receipt Number";
  String get consentTimestamp => "Date";
  String get contact => "Contact";
  String get email => "Email";
  String get jurisdiction => "Jurisdiction";
  String get language => "Language";
  String get onBehalf => "On behalf";
  String get onBehalf_no => "NO";
  String get onBehalf_yes => "YES";
  String get org => "Organization";
  String get phone => "Phone";
  String get piiController => "Personal Information Controller";
  String get piiPrincipalId => "Personal identifier";
  String get policyUrl => "Privacy Policy";
  String get purpose => "Purpose";
  String get purpose_consentType => "Consent Type";
  String get purpose_piiCategory => "Personal information categories";
  String get purpose_primary => "Primary purpose";
  String get purpose_primary_no => "NO";
  String get purpose_primary_yes => "YES";
  String get purpose_purposeCategory => "Purpose categories";
  String get purpose_termination => "Termination";
  String get purpose_third_party => "Third party";
  String get service_title => "Service";
  String get spiCat => "Sensitive info";
  String get url => "Web site";
  String address_postal_code_and_locality(String postalCode, String locality) => "${postalCode} ${locality}";
  String address_region_and_country(String region, String country) => "${region} ${country}";
}

class $en extends S {
  const $en();
}

class $es extends S {
  const $es();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get piiController => "Controlador de información personal";
  @override
  String get service_title => "Servicio";
  @override
  String get purpose_primary => "Propósito primario";
  @override
  String get purpose => "Propósito";
  @override
  String get jurisdiction => "Jurisdicción";
  @override
  String get language => "Idioma";
  @override
  String get consentTimestamp => "Fecha";
  @override
  String get policyUrl => "Política de privacidad";
  @override
  String get spiCat => "Inofrmación sensible";
  @override
  String get piiPrincipalId => "Identificador personal";
  @override
  String get contact => "Contacto";
  @override
  String get purpose_termination => "Finalización";
  @override
  String get purpose_primary_yes => "Si";
  @override
  String get onBehalf => "En representación";
  @override
  String get onBehalf_yes => "Si";
  @override
  String get email => "Email";
  @override
  String get address => "Dirección";
  @override
  String get org => "Empresa";
  @override
  String get purpose_piiCategory => "Categoría de información personal";
  @override
  String get purpose_purposeCategory => "Categoría de propósito";
  @override
  String get onBehalf_no => "No";
  @override
  String get purpose_third_party => "Tercero";
  @override
  String get consentReceiptID => "Número de recibo";
  @override
  String get url => "Sitio web";
  @override
  String get purpose_consentType => "Tipo de ponsentimiento";
  @override
  String get phone => "Teléfono";
  @override
  String get purpose_primary_no => "No";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("es", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "es":
          S.current = const $es();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
