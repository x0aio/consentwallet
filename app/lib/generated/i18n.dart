import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get drawer_conditions => "Terms & Conditions";
  String get drawer_privacy_policy => "Privacy Policy";
  String get drawer_specification => "Consent Receipt Specification";
  String get home_open => "Open a file...";
  String get home_title => "Receipts";
  String get search_message => "TODO";
  String get search_title => "Search consent receipts";
  String get timestamp_format => "yyyy-MM-dd HH:mm:ss";
  String get view_confirm_delete_cancel => "Cancel";
  String get view_confirm_delete_content => "Are you sure you want to delete the receipt?";
  String get view_confirm_delete_ok => "Ok";
  String get view_confirm_delete_title => "Delete receipt";
  String get view_delete => "Delete receipt";
  String get view_invalid_token => "Consent Receipt invalid";
  String get view_notify_error => "Notify error";
  String get view_save => "Store the receipt";
  String get view_share => "Share receipt";
  String get view_title => "Consent Receipt";
  String get welcome_continue => "Continue";
  String get welcome_first_sentence => "Your data will remain encrypted and protected in this terminal.";
  String get welcome_second_sentence => "There is no backup on our servers.";
  String get welcome_third_sentence => "If you delete the application you will lose your information";
  String get welcome_title => "Welcome :-)";
  String drawer_about(String version) => "Version $version";
  String home_stored_token_consentTimestamp(String dateTime) => "$dateTime";
}

class $en extends S {
  const $en();
}

class $es extends S {
  const $es();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get welcome_second_sentence => "No existe copia de respaldo en nuestros servidores.";
  @override
  String get drawer_privacy_policy => "Política de privacidad";
  @override
  String get view_confirm_delete_title => "Elimina el recibo";
  @override
  String get view_title => "Recibo";
  @override
  String get view_notify_error => "Notificar el error";
  @override
  String get welcome_title => "Bienvenido :-)";
  @override
  String get view_delete => "Elimina el recibo";
  @override
  String get home_title => "Recibos";
  @override
  String get welcome_first_sentence => "Tus datos se mantendrán encriptados y protegidos en tu terminal.";
  @override
  String get home_open => "Abrir un archivo...";
  @override
  String get search_message => "Por construir";
  @override
  String get search_title => "Busqueda de recibos";
  @override
  String get view_confirm_delete_content => "Estás seguro de querer eliminar el recibo?";
  @override
  String get view_invalid_token => "Este recibo de consentimiento es inválido";
  @override
  String get view_confirm_delete_ok => "Ok";
  @override
  String get view_save => "Guarda el recibo";
  @override
  String get view_share => "Compartir recibo";
  @override
  String get timestamp_format => "dd-MM-yyyy HH:mm:ss";
  @override
  String get welcome_continue => "Continuar";
  @override
  String get welcome_third_sentence => "Si eliminas la aplicación perderás tu información";
  @override
  String get drawer_specification => "Especificación Consent Receipt";
  @override
  String get drawer_conditions => "Términos y condiciones";
  @override
  String get view_confirm_delete_cancel => "Cancelar";
  @override
  String home_stored_token_consentTimestamp(String dateTime) => "$dateTime";
  @override
  String drawer_about(String version) => "Versión $version";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("es", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "es":
          S.current = const $es();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
